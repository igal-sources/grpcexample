// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: procedures.proto

package main

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ProcedureActionType int32

const (
	ProcedureActionType_None           ProcedureActionType = 0
	ProcedureActionType_PrintLog       ProcedureActionType = 1
	ProcedureActionType_DispatchForces ProcedureActionType = 2
)

// Enum value maps for ProcedureActionType.
var (
	ProcedureActionType_name = map[int32]string{
		0: "None",
		1: "PrintLog",
		2: "DispatchForces",
	}
	ProcedureActionType_value = map[string]int32{
		"None":           0,
		"PrintLog":       1,
		"DispatchForces": 2,
	}
)

func (x ProcedureActionType) Enum() *ProcedureActionType {
	p := new(ProcedureActionType)
	*p = x
	return p
}

func (x ProcedureActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcedureActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_procedures_proto_enumTypes[0].Descriptor()
}

func (ProcedureActionType) Type() protoreflect.EnumType {
	return &file_procedures_proto_enumTypes[0]
}

func (x ProcedureActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcedureActionType.Descriptor instead.
func (ProcedureActionType) EnumDescriptor() ([]byte, []int) {
	return file_procedures_proto_rawDescGZIP(), []int{0}
}

type ProcedureStepResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcedureStepResultID int32  `protobuf:"varint,1,opt,name=procedureStepResultID,proto3" json:"procedureStepResultID,omitempty"`
	SequenceNumber        int32  `protobuf:"varint,2,opt,name=sequenceNumber,proto3" json:"sequenceNumber,omitempty"`
	Name                  string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ProcedureStepResult) Reset() {
	*x = ProcedureStepResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_procedures_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureStepResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureStepResult) ProtoMessage() {}

func (x *ProcedureStepResult) ProtoReflect() protoreflect.Message {
	mi := &file_procedures_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureStepResult.ProtoReflect.Descriptor instead.
func (*ProcedureStepResult) Descriptor() ([]byte, []int) {
	return file_procedures_proto_rawDescGZIP(), []int{0}
}

func (x *ProcedureStepResult) GetProcedureStepResultID() int32 {
	if x != nil {
		return x.ProcedureStepResultID
	}
	return 0
}

func (x *ProcedureStepResult) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *ProcedureStepResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ProcedureAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ProcedureActionId int32               `protobuf:"varint,2,opt,name=procedureActionId,proto3" json:"procedureActionId,omitempty"`
	ProcedureStepId   int32               `protobuf:"varint,3,opt,name=procedureStepId,proto3" json:"procedureStepId,omitempty"`
	ActionType        ProcedureActionType `protobuf:"varint,4,opt,name=actionType,proto3,enum=v1.ProcedureActionType" json:"actionType,omitempty"`
	ActionParams      string              `protobuf:"bytes,5,opt,name=actionParams,proto3" json:"actionParams,omitempty"`
	IsAutomatic       bool                `protobuf:"varint,6,opt,name=isAutomatic,proto3" json:"isAutomatic,omitempty"`
}

func (x *ProcedureAction) Reset() {
	*x = ProcedureAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_procedures_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureAction) ProtoMessage() {}

func (x *ProcedureAction) ProtoReflect() protoreflect.Message {
	mi := &file_procedures_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureAction.ProtoReflect.Descriptor instead.
func (*ProcedureAction) Descriptor() ([]byte, []int) {
	return file_procedures_proto_rawDescGZIP(), []int{1}
}

func (x *ProcedureAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcedureAction) GetProcedureActionId() int32 {
	if x != nil {
		return x.ProcedureActionId
	}
	return 0
}

func (x *ProcedureAction) GetProcedureStepId() int32 {
	if x != nil {
		return x.ProcedureStepId
	}
	return 0
}

func (x *ProcedureAction) GetActionType() ProcedureActionType {
	if x != nil {
		return x.ActionType
	}
	return ProcedureActionType_None
}

func (x *ProcedureAction) GetActionParams() string {
	if x != nil {
		return x.ActionParams
	}
	return ""
}

func (x *ProcedureAction) GetIsAutomatic() bool {
	if x != nil {
		return x.IsAutomatic
	}
	return false
}

type ProcedureStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcedureStepID int32                  `protobuf:"varint,1,opt,name=procedureStepID,proto3" json:"procedureStepID,omitempty"`
	SequenceNumber  int32                  `protobuf:"varint,2,opt,name=sequenceNumber,proto3" json:"sequenceNumber,omitempty"`
	Title           string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Intruction      string                 `protobuf:"bytes,4,opt,name=intruction,proto3" json:"intruction,omitempty"`
	PossibleResults []*ProcedureStepResult `protobuf:"bytes,5,rep,name=possibleResults,proto3" json:"possibleResults,omitempty"`
	ProcedureAction *ProcedureAction       `protobuf:"bytes,6,opt,name=procedureAction,proto3" json:"procedureAction,omitempty"`
}

func (x *ProcedureStep) Reset() {
	*x = ProcedureStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_procedures_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureStep) ProtoMessage() {}

func (x *ProcedureStep) ProtoReflect() protoreflect.Message {
	mi := &file_procedures_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureStep.ProtoReflect.Descriptor instead.
func (*ProcedureStep) Descriptor() ([]byte, []int) {
	return file_procedures_proto_rawDescGZIP(), []int{2}
}

func (x *ProcedureStep) GetProcedureStepID() int32 {
	if x != nil {
		return x.ProcedureStepID
	}
	return 0
}

func (x *ProcedureStep) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *ProcedureStep) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ProcedureStep) GetIntruction() string {
	if x != nil {
		return x.Intruction
	}
	return ""
}

func (x *ProcedureStep) GetPossibleResults() []*ProcedureStepResult {
	if x != nil {
		return x.PossibleResults
	}
	return nil
}

func (x *ProcedureStep) GetProcedureAction() *ProcedureAction {
	if x != nil {
		return x.ProcedureAction
	}
	return nil
}

type ProcedureCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventTypeId int32                `protobuf:"varint,1,opt,name=eventTypeId,proto3" json:"eventTypeId,omitempty"`
	Severity    int32                `protobuf:"varint,2,opt,name=severity,proto3" json:"severity,omitempty"`
	Priority    int32                `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	StartAt     *timestamp.Timestamp `protobuf:"bytes,4,opt,name=startAt,proto3" json:"startAt,omitempty"`
	EndAt       *timestamp.Timestamp `protobuf:"bytes,5,opt,name=endAt,proto3" json:"endAt,omitempty"`
}

func (x *ProcedureCondition) Reset() {
	*x = ProcedureCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_procedures_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureCondition) ProtoMessage() {}

func (x *ProcedureCondition) ProtoReflect() protoreflect.Message {
	mi := &file_procedures_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureCondition.ProtoReflect.Descriptor instead.
func (*ProcedureCondition) Descriptor() ([]byte, []int) {
	return file_procedures_proto_rawDescGZIP(), []int{3}
}

func (x *ProcedureCondition) GetEventTypeId() int32 {
	if x != nil {
		return x.EventTypeId
	}
	return 0
}

func (x *ProcedureCondition) GetSeverity() int32 {
	if x != nil {
		return x.Severity
	}
	return 0
}

func (x *ProcedureCondition) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ProcedureCondition) GetStartAt() *timestamp.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *ProcedureCondition) GetEndAt() *timestamp.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

type ProcedureSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecurrenceType   int32                `protobuf:"varint,1,opt,name=recurrenceType,proto3" json:"recurrenceType,omitempty"`
	StartAt          *timestamp.Timestamp `protobuf:"bytes,2,opt,name=startAt,proto3" json:"startAt,omitempty"`
	EndAt            *timestamp.Timestamp `protobuf:"bytes,3,opt,name=endAt,proto3" json:"endAt,omitempty"`
	RecurrenceValues string               `protobuf:"bytes,4,opt,name=recurrenceValues,proto3" json:"recurrenceValues,omitempty"`
	Duration         int64                `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *ProcedureSchedule) Reset() {
	*x = ProcedureSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_procedures_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureSchedule) ProtoMessage() {}

func (x *ProcedureSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_procedures_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureSchedule.ProtoReflect.Descriptor instead.
func (*ProcedureSchedule) Descriptor() ([]byte, []int) {
	return file_procedures_proto_rawDescGZIP(), []int{4}
}

func (x *ProcedureSchedule) GetRecurrenceType() int32 {
	if x != nil {
		return x.RecurrenceType
	}
	return 0
}

func (x *ProcedureSchedule) GetStartAt() *timestamp.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *ProcedureSchedule) GetEndAt() *timestamp.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *ProcedureSchedule) GetRecurrenceValues() string {
	if x != nil {
		return x.RecurrenceValues
	}
	return ""
}

func (x *ProcedureSchedule) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type ProcedureTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcedureId    string               `protobuf:"bytes,1,opt,name=procedureId,proto3" json:"procedureId,omitempty"`
	Name           string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description    string               `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	CreationDate   *timestamp.Timestamp `protobuf:"bytes,4,opt,name=creationDate,proto3" json:"creationDate,omitempty"`
	ModifyDate     *timestamp.Timestamp `protobuf:"bytes,5,opt,name=modifyDate,proto3" json:"modifyDate,omitempty"`
	ValidityDate   *timestamp.Timestamp `protobuf:"bytes,6,opt,name=validityDate,proto3" json:"validityDate,omitempty"`
	CreatingUserId int32                `protobuf:"varint,7,opt,name=creatingUserId,proto3" json:"creatingUserId,omitempty"`
	ModifyUserId   int32                `protobuf:"varint,8,opt,name=modifyUserId,proto3" json:"modifyUserId,omitempty"`
	IsActive       bool                 `protobuf:"varint,9,opt,name=isActive,proto3" json:"isActive,omitempty"`
	IsDeleted      bool                 `protobuf:"varint,10,opt,name=isDeleted,proto3" json:"isDeleted,omitempty"`
	Condition      *ProcedureCondition  `protobuf:"bytes,11,opt,name=condition,proto3" json:"condition,omitempty"`
	GeoArea        string               `protobuf:"bytes,12,opt,name=geoArea,proto3" json:"geoArea,omitempty"`
	Schedule       *ProcedureSchedule   `protobuf:"bytes,13,opt,name=schedule,proto3" json:"schedule,omitempty"`
	Steps          []*ProcedureStep     `protobuf:"bytes,14,rep,name=steps,proto3" json:"steps,omitempty"`
}

func (x *ProcedureTemplate) Reset() {
	*x = ProcedureTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_procedures_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureTemplate) ProtoMessage() {}

func (x *ProcedureTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_procedures_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureTemplate.ProtoReflect.Descriptor instead.
func (*ProcedureTemplate) Descriptor() ([]byte, []int) {
	return file_procedures_proto_rawDescGZIP(), []int{5}
}

func (x *ProcedureTemplate) GetProcedureId() string {
	if x != nil {
		return x.ProcedureId
	}
	return ""
}

func (x *ProcedureTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcedureTemplate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProcedureTemplate) GetCreationDate() *timestamp.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *ProcedureTemplate) GetModifyDate() *timestamp.Timestamp {
	if x != nil {
		return x.ModifyDate
	}
	return nil
}

func (x *ProcedureTemplate) GetValidityDate() *timestamp.Timestamp {
	if x != nil {
		return x.ValidityDate
	}
	return nil
}

func (x *ProcedureTemplate) GetCreatingUserId() int32 {
	if x != nil {
		return x.CreatingUserId
	}
	return 0
}

func (x *ProcedureTemplate) GetModifyUserId() int32 {
	if x != nil {
		return x.ModifyUserId
	}
	return 0
}

func (x *ProcedureTemplate) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *ProcedureTemplate) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *ProcedureTemplate) GetCondition() *ProcedureCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *ProcedureTemplate) GetGeoArea() string {
	if x != nil {
		return x.GeoArea
	}
	return ""
}

func (x *ProcedureTemplate) GetSchedule() *ProcedureSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *ProcedureTemplate) GetSteps() []*ProcedureStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

type CreateProcedureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcedureTemplate *ProcedureTemplate `protobuf:"bytes,1,opt,name=procedureTemplate,proto3" json:"procedureTemplate,omitempty"`
}

func (x *CreateProcedureRequest) Reset() {
	*x = CreateProcedureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_procedures_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProcedureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProcedureRequest) ProtoMessage() {}

func (x *CreateProcedureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_procedures_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProcedureRequest.ProtoReflect.Descriptor instead.
func (*CreateProcedureRequest) Descriptor() ([]byte, []int) {
	return file_procedures_proto_rawDescGZIP(), []int{6}
}

func (x *CreateProcedureRequest) GetProcedureTemplate() *ProcedureTemplate {
	if x != nil {
		return x.ProcedureTemplate
	}
	return nil
}

type CreateProcedureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateProcedureResponse) Reset() {
	*x = CreateProcedureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_procedures_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProcedureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProcedureResponse) ProtoMessage() {}

func (x *CreateProcedureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_procedures_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProcedureResponse.ProtoReflect.Descriptor instead.
func (*CreateProcedureResponse) Descriptor() ([]byte, []int) {
	return file_procedures_proto_rawDescGZIP(), []int{7}
}

type UpdateProcedureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcedureTemplate *ProcedureTemplate `protobuf:"bytes,1,opt,name=procedureTemplate,proto3" json:"procedureTemplate,omitempty"`
}

func (x *UpdateProcedureRequest) Reset() {
	*x = UpdateProcedureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_procedures_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProcedureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProcedureRequest) ProtoMessage() {}

func (x *UpdateProcedureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_procedures_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProcedureRequest.ProtoReflect.Descriptor instead.
func (*UpdateProcedureRequest) Descriptor() ([]byte, []int) {
	return file_procedures_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateProcedureRequest) GetProcedureTemplate() *ProcedureTemplate {
	if x != nil {
		return x.ProcedureTemplate
	}
	return nil
}

type UpdateProcedureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateProcedureResponse) Reset() {
	*x = UpdateProcedureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_procedures_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProcedureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProcedureResponse) ProtoMessage() {}

func (x *UpdateProcedureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_procedures_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProcedureResponse.ProtoReflect.Descriptor instead.
func (*UpdateProcedureResponse) Descriptor() ([]byte, []int) {
	return file_procedures_proto_rawDescGZIP(), []int{9}
}

type DeleteProcedureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcedureId string `protobuf:"bytes,1,opt,name=procedureId,proto3" json:"procedureId,omitempty"`
}

func (x *DeleteProcedureRequest) Reset() {
	*x = DeleteProcedureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_procedures_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProcedureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProcedureRequest) ProtoMessage() {}

func (x *DeleteProcedureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_procedures_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProcedureRequest.ProtoReflect.Descriptor instead.
func (*DeleteProcedureRequest) Descriptor() ([]byte, []int) {
	return file_procedures_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteProcedureRequest) GetProcedureId() string {
	if x != nil {
		return x.ProcedureId
	}
	return ""
}

type DeleteProcedureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteProcedureResponse) Reset() {
	*x = DeleteProcedureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_procedures_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProcedureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProcedureResponse) ProtoMessage() {}

func (x *DeleteProcedureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_procedures_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProcedureResponse.ProtoReflect.Descriptor instead.
func (*DeleteProcedureResponse) Descriptor() ([]byte, []int) {
	return file_procedures_proto_rawDescGZIP(), []int{11}
}

type LockProcedureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcedureId string `protobuf:"bytes,1,opt,name=procedureId,proto3" json:"procedureId,omitempty"`
	UserId      int32  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	IsLocked    bool   `protobuf:"varint,3,opt,name=isLocked,proto3" json:"isLocked,omitempty"`
}

func (x *LockProcedureRequest) Reset() {
	*x = LockProcedureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_procedures_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockProcedureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockProcedureRequest) ProtoMessage() {}

func (x *LockProcedureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_procedures_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockProcedureRequest.ProtoReflect.Descriptor instead.
func (*LockProcedureRequest) Descriptor() ([]byte, []int) {
	return file_procedures_proto_rawDescGZIP(), []int{12}
}

func (x *LockProcedureRequest) GetProcedureId() string {
	if x != nil {
		return x.ProcedureId
	}
	return ""
}

func (x *LockProcedureRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LockProcedureRequest) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

type LockProcedureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LockProcedureResponse) Reset() {
	*x = LockProcedureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_procedures_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockProcedureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockProcedureResponse) ProtoMessage() {}

func (x *LockProcedureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_procedures_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockProcedureResponse.ProtoReflect.Descriptor instead.
func (*LockProcedureResponse) Descriptor() ([]byte, []int) {
	return file_procedures_proto_rawDescGZIP(), []int{13}
}

type GetProceduresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From                  int32    `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	Take                  int32    `protobuf:"varint,2,opt,name=take,proto3" json:"take,omitempty"`
	FilterByIds           []string `protobuf:"bytes,3,rep,name=filterByIds,proto3" json:"filterByIds,omitempty"`
	FilterByEventTypeId   int32    `protobuf:"varint,4,opt,name=filterByEventTypeId,proto3" json:"filterByEventTypeId,omitempty"`
	FilterByEventSeverity int32    `protobuf:"varint,5,opt,name=filterByEventSeverity,proto3" json:"filterByEventSeverity,omitempty"`
}

func (x *GetProceduresRequest) Reset() {
	*x = GetProceduresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_procedures_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProceduresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProceduresRequest) ProtoMessage() {}

func (x *GetProceduresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_procedures_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProceduresRequest.ProtoReflect.Descriptor instead.
func (*GetProceduresRequest) Descriptor() ([]byte, []int) {
	return file_procedures_proto_rawDescGZIP(), []int{14}
}

func (x *GetProceduresRequest) GetFrom() int32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *GetProceduresRequest) GetTake() int32 {
	if x != nil {
		return x.Take
	}
	return 0
}

func (x *GetProceduresRequest) GetFilterByIds() []string {
	if x != nil {
		return x.FilterByIds
	}
	return nil
}

func (x *GetProceduresRequest) GetFilterByEventTypeId() int32 {
	if x != nil {
		return x.FilterByEventTypeId
	}
	return 0
}

func (x *GetProceduresRequest) GetFilterByEventSeverity() int32 {
	if x != nil {
		return x.FilterByEventSeverity
	}
	return 0
}

type GetProceduresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Procedures []*ProcedureTemplate `protobuf:"bytes,1,rep,name=procedures,proto3" json:"procedures,omitempty"`
}

func (x *GetProceduresResponse) Reset() {
	*x = GetProceduresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_procedures_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProceduresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProceduresResponse) ProtoMessage() {}

func (x *GetProceduresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_procedures_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProceduresResponse.ProtoReflect.Descriptor instead.
func (*GetProceduresResponse) Descriptor() ([]byte, []int) {
	return file_procedures_proto_rawDescGZIP(), []int{15}
}

func (x *GetProceduresResponse) GetProcedures() []*ProcedureTemplate {
	if x != nil {
		return x.Procedures
	}
	return nil
}

type ProcedureAdded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcedureTemplate *ProcedureTemplate `protobuf:"bytes,1,opt,name=procedureTemplate,proto3" json:"procedureTemplate,omitempty"`
}

func (x *ProcedureAdded) Reset() {
	*x = ProcedureAdded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_procedures_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureAdded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureAdded) ProtoMessage() {}

func (x *ProcedureAdded) ProtoReflect() protoreflect.Message {
	mi := &file_procedures_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureAdded.ProtoReflect.Descriptor instead.
func (*ProcedureAdded) Descriptor() ([]byte, []int) {
	return file_procedures_proto_rawDescGZIP(), []int{16}
}

func (x *ProcedureAdded) GetProcedureTemplate() *ProcedureTemplate {
	if x != nil {
		return x.ProcedureTemplate
	}
	return nil
}

type ProcedureUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcedureTemplate *ProcedureTemplate `protobuf:"bytes,1,opt,name=procedureTemplate,proto3" json:"procedureTemplate,omitempty"`
}

func (x *ProcedureUpdated) Reset() {
	*x = ProcedureUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_procedures_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureUpdated) ProtoMessage() {}

func (x *ProcedureUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_procedures_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureUpdated.ProtoReflect.Descriptor instead.
func (*ProcedureUpdated) Descriptor() ([]byte, []int) {
	return file_procedures_proto_rawDescGZIP(), []int{17}
}

func (x *ProcedureUpdated) GetProcedureTemplate() *ProcedureTemplate {
	if x != nil {
		return x.ProcedureTemplate
	}
	return nil
}

type ProcedureDeleted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcedureId string `protobuf:"bytes,1,opt,name=procedureId,proto3" json:"procedureId,omitempty"`
}

func (x *ProcedureDeleted) Reset() {
	*x = ProcedureDeleted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_procedures_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureDeleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureDeleted) ProtoMessage() {}

func (x *ProcedureDeleted) ProtoReflect() protoreflect.Message {
	mi := &file_procedures_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureDeleted.ProtoReflect.Descriptor instead.
func (*ProcedureDeleted) Descriptor() ([]byte, []int) {
	return file_procedures_proto_rawDescGZIP(), []int{18}
}

func (x *ProcedureDeleted) GetProcedureId() string {
	if x != nil {
		return x.ProcedureId
	}
	return ""
}

type ProcedureLocked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcedureId string `protobuf:"bytes,1,opt,name=procedureId,proto3" json:"procedureId,omitempty"`
	UserId      int32  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	IsLocked    bool   `protobuf:"varint,3,opt,name=isLocked,proto3" json:"isLocked,omitempty"`
}

func (x *ProcedureLocked) Reset() {
	*x = ProcedureLocked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_procedures_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureLocked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureLocked) ProtoMessage() {}

func (x *ProcedureLocked) ProtoReflect() protoreflect.Message {
	mi := &file_procedures_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureLocked.ProtoReflect.Descriptor instead.
func (*ProcedureLocked) Descriptor() ([]byte, []int) {
	return file_procedures_proto_rawDescGZIP(), []int{19}
}

func (x *ProcedureLocked) GetProcedureId() string {
	if x != nil {
		return x.ProcedureId
	}
	return ""
}

func (x *ProcedureLocked) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ProcedureLocked) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

var File_procedures_proto protoreflect.FileDescriptor

var file_procedures_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x34, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xfc, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63,
	0x22, 0x99, 0x02, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0f, 0x70, 0x6f,
	0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f, 0x70, 0x6f,
	0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3d, 0x0a,
	0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd6, 0x01, 0x0a,
	0x12, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05,
	0x65, 0x6e, 0x64, 0x41, 0x74, 0x22, 0xeb, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64,
	0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xd9, 0x04, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a,
	0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x6f,
	0x41, 0x72, 0x65, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x65, 0x6f, 0x41,
	0x72, 0x65, 0x61, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x22,
	0x5d, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x11, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x11, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x19,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3a, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x49, 0x64, 0x22,
	0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x0a, 0x14, 0x4c, 0x6f,
	0x63, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x4c, 0x6f, 0x63, 0x6b,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xc8, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x61,
	0x6b, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42,
	0x79, 0x49, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x42, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0x4e, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x22, 0x55, 0x0a, 0x0e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x43,
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x22, 0x57, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x34, 0x0a, 0x10,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x49, 0x64, 0x22, 0x67, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x2a, 0x41, 0x0a, 0x13, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x50, 0x72, 0x69, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x73, 0x10, 0x02, 0x32, 0x82,
	0x03, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a,
	0x0d, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x18,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x63, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_procedures_proto_rawDescOnce sync.Once
	file_procedures_proto_rawDescData = file_procedures_proto_rawDesc
)

func file_procedures_proto_rawDescGZIP() []byte {
	file_procedures_proto_rawDescOnce.Do(func() {
		file_procedures_proto_rawDescData = protoimpl.X.CompressGZIP(file_procedures_proto_rawDescData)
	})
	return file_procedures_proto_rawDescData
}

var file_procedures_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_procedures_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_procedures_proto_goTypes = []interface{}{
	(ProcedureActionType)(0),        // 0: v1.ProcedureActionType
	(*ProcedureStepResult)(nil),     // 1: v1.ProcedureStepResult
	(*ProcedureAction)(nil),         // 2: v1.ProcedureAction
	(*ProcedureStep)(nil),           // 3: v1.ProcedureStep
	(*ProcedureCondition)(nil),      // 4: v1.ProcedureCondition
	(*ProcedureSchedule)(nil),       // 5: v1.ProcedureSchedule
	(*ProcedureTemplate)(nil),       // 6: v1.ProcedureTemplate
	(*CreateProcedureRequest)(nil),  // 7: v1.CreateProcedureRequest
	(*CreateProcedureResponse)(nil), // 8: v1.CreateProcedureResponse
	(*UpdateProcedureRequest)(nil),  // 9: v1.UpdateProcedureRequest
	(*UpdateProcedureResponse)(nil), // 10: v1.UpdateProcedureResponse
	(*DeleteProcedureRequest)(nil),  // 11: v1.DeleteProcedureRequest
	(*DeleteProcedureResponse)(nil), // 12: v1.DeleteProcedureResponse
	(*LockProcedureRequest)(nil),    // 13: v1.LockProcedureRequest
	(*LockProcedureResponse)(nil),   // 14: v1.LockProcedureResponse
	(*GetProceduresRequest)(nil),    // 15: v1.GetProceduresRequest
	(*GetProceduresResponse)(nil),   // 16: v1.GetProceduresResponse
	(*ProcedureAdded)(nil),          // 17: v1.ProcedureAdded
	(*ProcedureUpdated)(nil),        // 18: v1.ProcedureUpdated
	(*ProcedureDeleted)(nil),        // 19: v1.ProcedureDeleted
	(*ProcedureLocked)(nil),         // 20: v1.ProcedureLocked
	(*timestamp.Timestamp)(nil),     // 21: google.protobuf.Timestamp
}
var file_procedures_proto_depIdxs = []int32{
	0,  // 0: v1.ProcedureAction.actionType:type_name -> v1.ProcedureActionType
	1,  // 1: v1.ProcedureStep.possibleResults:type_name -> v1.ProcedureStepResult
	2,  // 2: v1.ProcedureStep.procedureAction:type_name -> v1.ProcedureAction
	21, // 3: v1.ProcedureCondition.startAt:type_name -> google.protobuf.Timestamp
	21, // 4: v1.ProcedureCondition.endAt:type_name -> google.protobuf.Timestamp
	21, // 5: v1.ProcedureSchedule.startAt:type_name -> google.protobuf.Timestamp
	21, // 6: v1.ProcedureSchedule.endAt:type_name -> google.protobuf.Timestamp
	21, // 7: v1.ProcedureTemplate.creationDate:type_name -> google.protobuf.Timestamp
	21, // 8: v1.ProcedureTemplate.modifyDate:type_name -> google.protobuf.Timestamp
	21, // 9: v1.ProcedureTemplate.validityDate:type_name -> google.protobuf.Timestamp
	4,  // 10: v1.ProcedureTemplate.condition:type_name -> v1.ProcedureCondition
	5,  // 11: v1.ProcedureTemplate.schedule:type_name -> v1.ProcedureSchedule
	3,  // 12: v1.ProcedureTemplate.steps:type_name -> v1.ProcedureStep
	6,  // 13: v1.CreateProcedureRequest.procedureTemplate:type_name -> v1.ProcedureTemplate
	6,  // 14: v1.UpdateProcedureRequest.procedureTemplate:type_name -> v1.ProcedureTemplate
	6,  // 15: v1.GetProceduresResponse.procedures:type_name -> v1.ProcedureTemplate
	6,  // 16: v1.ProcedureAdded.procedureTemplate:type_name -> v1.ProcedureTemplate
	6,  // 17: v1.ProcedureUpdated.procedureTemplate:type_name -> v1.ProcedureTemplate
	15, // 18: v1.ProcedureService.GetProcedures:input_type -> v1.GetProceduresRequest
	7,  // 19: v1.ProcedureService.CreateProcedure:input_type -> v1.CreateProcedureRequest
	9,  // 20: v1.ProcedureService.UpdateProcedure:input_type -> v1.UpdateProcedureRequest
	11, // 21: v1.ProcedureService.DeleteProcedure:input_type -> v1.DeleteProcedureRequest
	13, // 22: v1.ProcedureService.LockProcedure:input_type -> v1.LockProcedureRequest
	16, // 23: v1.ProcedureService.GetProcedures:output_type -> v1.GetProceduresResponse
	8,  // 24: v1.ProcedureService.CreateProcedure:output_type -> v1.CreateProcedureResponse
	10, // 25: v1.ProcedureService.UpdateProcedure:output_type -> v1.UpdateProcedureResponse
	12, // 26: v1.ProcedureService.DeleteProcedure:output_type -> v1.DeleteProcedureResponse
	14, // 27: v1.ProcedureService.LockProcedure:output_type -> v1.LockProcedureResponse
	23, // [23:28] is the sub-list for method output_type
	18, // [18:23] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_procedures_proto_init() }
func file_procedures_proto_init() {
	if File_procedures_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_procedures_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureStepResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_procedures_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_procedures_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_procedures_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_procedures_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_procedures_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_procedures_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProcedureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_procedures_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProcedureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_procedures_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProcedureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_procedures_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProcedureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_procedures_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProcedureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_procedures_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProcedureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_procedures_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockProcedureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_procedures_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockProcedureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_procedures_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProceduresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_procedures_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProceduresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_procedures_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureAdded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_procedures_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_procedures_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureDeleted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_procedures_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureLocked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_procedures_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_procedures_proto_goTypes,
		DependencyIndexes: file_procedures_proto_depIdxs,
		EnumInfos:         file_procedures_proto_enumTypes,
		MessageInfos:      file_procedures_proto_msgTypes,
	}.Build()
	File_procedures_proto = out.File
	file_procedures_proto_rawDesc = nil
	file_procedures_proto_goTypes = nil
	file_procedures_proto_depIdxs = nil
}

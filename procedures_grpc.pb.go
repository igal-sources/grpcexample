// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProcedureServiceClient is the client API for ProcedureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcedureServiceClient interface {
	GetProcedures(ctx context.Context, in *GetProceduresRequest, opts ...grpc.CallOption) (*GetProceduresResponse, error)
	CreateProcedure(ctx context.Context, in *CreateProcedureRequest, opts ...grpc.CallOption) (*CreateProcedureResponse, error)
	UpdateProcedure(ctx context.Context, in *UpdateProcedureRequest, opts ...grpc.CallOption) (*UpdateProcedureResponse, error)
	DeleteProcedure(ctx context.Context, in *DeleteProcedureRequest, opts ...grpc.CallOption) (*DeleteProcedureResponse, error)
	LockProcedure(ctx context.Context, in *LockProcedureRequest, opts ...grpc.CallOption) (*LockProcedureResponse, error)
}

type procedureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProcedureServiceClient(cc grpc.ClientConnInterface) ProcedureServiceClient {
	return &procedureServiceClient{cc}
}

func (c *procedureServiceClient) GetProcedures(ctx context.Context, in *GetProceduresRequest, opts ...grpc.CallOption) (*GetProceduresResponse, error) {
	out := new(GetProceduresResponse)
	err := c.cc.Invoke(ctx, "/v1.ProcedureService/GetProcedures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *procedureServiceClient) CreateProcedure(ctx context.Context, in *CreateProcedureRequest, opts ...grpc.CallOption) (*CreateProcedureResponse, error) {
	out := new(CreateProcedureResponse)
	err := c.cc.Invoke(ctx, "/v1.ProcedureService/CreateProcedure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *procedureServiceClient) UpdateProcedure(ctx context.Context, in *UpdateProcedureRequest, opts ...grpc.CallOption) (*UpdateProcedureResponse, error) {
	out := new(UpdateProcedureResponse)
	err := c.cc.Invoke(ctx, "/v1.ProcedureService/UpdateProcedure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *procedureServiceClient) DeleteProcedure(ctx context.Context, in *DeleteProcedureRequest, opts ...grpc.CallOption) (*DeleteProcedureResponse, error) {
	out := new(DeleteProcedureResponse)
	err := c.cc.Invoke(ctx, "/v1.ProcedureService/DeleteProcedure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *procedureServiceClient) LockProcedure(ctx context.Context, in *LockProcedureRequest, opts ...grpc.CallOption) (*LockProcedureResponse, error) {
	out := new(LockProcedureResponse)
	err := c.cc.Invoke(ctx, "/v1.ProcedureService/LockProcedure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcedureServiceServer is the server API for ProcedureService service.
// All implementations must embed UnimplementedProcedureServiceServer
// for forward compatibility
type ProcedureServiceServer interface {
	GetProcedures(context.Context, *GetProceduresRequest) (*GetProceduresResponse, error)
	CreateProcedure(context.Context, *CreateProcedureRequest) (*CreateProcedureResponse, error)
	UpdateProcedure(context.Context, *UpdateProcedureRequest) (*UpdateProcedureResponse, error)
	DeleteProcedure(context.Context, *DeleteProcedureRequest) (*DeleteProcedureResponse, error)
	LockProcedure(context.Context, *LockProcedureRequest) (*LockProcedureResponse, error)
	mustEmbedUnimplementedProcedureServiceServer()
}

// UnimplementedProcedureServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProcedureServiceServer struct {
}

func (UnimplementedProcedureServiceServer) GetProcedures(context.Context, *GetProceduresRequest) (*GetProceduresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcedures not implemented")
}
func (UnimplementedProcedureServiceServer) CreateProcedure(context.Context, *CreateProcedureRequest) (*CreateProcedureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProcedure not implemented")
}
func (UnimplementedProcedureServiceServer) UpdateProcedure(context.Context, *UpdateProcedureRequest) (*UpdateProcedureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProcedure not implemented")
}
func (UnimplementedProcedureServiceServer) DeleteProcedure(context.Context, *DeleteProcedureRequest) (*DeleteProcedureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProcedure not implemented")
}
func (UnimplementedProcedureServiceServer) LockProcedure(context.Context, *LockProcedureRequest) (*LockProcedureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockProcedure not implemented")
}
func (UnimplementedProcedureServiceServer) mustEmbedUnimplementedProcedureServiceServer() {}

// UnsafeProcedureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcedureServiceServer will
// result in compilation errors.
type UnsafeProcedureServiceServer interface {
	mustEmbedUnimplementedProcedureServiceServer()
}

func RegisterProcedureServiceServer(s grpc.ServiceRegistrar, srv ProcedureServiceServer) {
	s.RegisterService(&ProcedureService_ServiceDesc, srv)
}

func _ProcedureService_GetProcedures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProceduresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcedureServiceServer).GetProcedures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProcedureService/GetProcedures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcedureServiceServer).GetProcedures(ctx, req.(*GetProceduresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcedureService_CreateProcedure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProcedureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcedureServiceServer).CreateProcedure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProcedureService/CreateProcedure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcedureServiceServer).CreateProcedure(ctx, req.(*CreateProcedureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcedureService_UpdateProcedure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProcedureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcedureServiceServer).UpdateProcedure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProcedureService/UpdateProcedure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcedureServiceServer).UpdateProcedure(ctx, req.(*UpdateProcedureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcedureService_DeleteProcedure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProcedureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcedureServiceServer).DeleteProcedure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProcedureService/DeleteProcedure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcedureServiceServer).DeleteProcedure(ctx, req.(*DeleteProcedureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcedureService_LockProcedure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockProcedureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcedureServiceServer).LockProcedure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProcedureService/LockProcedure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcedureServiceServer).LockProcedure(ctx, req.(*LockProcedureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProcedureService_ServiceDesc is the grpc.ServiceDesc for ProcedureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProcedureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ProcedureService",
	HandlerType: (*ProcedureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProcedures",
			Handler:    _ProcedureService_GetProcedures_Handler,
		},
		{
			MethodName: "CreateProcedure",
			Handler:    _ProcedureService_CreateProcedure_Handler,
		},
		{
			MethodName: "UpdateProcedure",
			Handler:    _ProcedureService_UpdateProcedure_Handler,
		},
		{
			MethodName: "DeleteProcedure",
			Handler:    _ProcedureService_DeleteProcedure_Handler,
		},
		{
			MethodName: "LockProcedure",
			Handler:    _ProcedureService_LockProcedure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "procedures.proto",
}
